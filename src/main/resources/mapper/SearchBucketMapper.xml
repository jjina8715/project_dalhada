<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="resource.SearchBucketMapper">
<!-- 페이징 시작 -->
	<!-- 검색결과 수 -->
	<select id="totalTitleCnt" parameterType="String" resultType="int">
		select count(*) from bucketinfo bi, selectedbucket sb where bi.id = sb.bucket_id and privacy = 'y' 
		and sb.title like '%'||#{searchKeyword}||'%'
	</select>

	<!-- 제목검색 -->
 	<select id="searchTitle" parameterType="vo.SearchBucketVO"  resultType="vo.SearchBucketVO">
 		select id, image, title from (select bi.id, bi.image image, sb.title title, rownum rnum from bucketinfo bi, selectedbucket sb 
 		where bi.id = sb.bucket_id and privacy = 'y' and title like '%'||#{searchKeyword}||'%') 
 		where rnum between #{start} and #{last}
 	</select>
<!-- 페이징 끝 -->
	
<!-- 페이징 시작 -->	
	<!-- 검색결과 수 -->
	<select id="totalTagCnt" parameterType="String" resultType="int">
		select count(*) from bucketinfo bi, selectedbucket sb where bi.id = sb.bucket_id 
		and sb.id in (select st.bucket_id from selectedtag st, taginfo ti
		where st.tag_id = ti.id and ti.name = #{searchTagName})
	</select>

	<!-- 태그검색 -->
	<select id="searchTag" parameterType="vo.SearchBucketVO"  resultType="vo.SearchBucketVO">
		select id, image, title from(select bi.id, bi.image image, sb.title title, rownum rnum from bucketinfo bi, selectedbucket sb
		where bi.id = sb.bucket_id and sb.id in (select st.bucket_id from selectedtag st, taginfo ti
		where st.tag_id = ti.id and privacy = 'y' and ti.name = #{searchTag})) where rnum between #{start} and #{last}
	</select>
<!-- 페이징 끝 -->

	<!-- 블로그리뷰 -->
	
	<!-- 동영상 -->
	
	<!-- 좋아요 -->

<!-- 가져오기 시작 -->
	<!-- cnt값 찾기 -->
	<select id="selectGetCnt" parameterType="_int"  resultType="vo.LikeGetVO">
		select cnt from bucketinfo where id=#{id}
	</select>
	
	<!-- cnt값 증가 -->
	<update id="updateGetCnt" parameterType="vo.LikeGetVO">
		update bucketinfo set cnt=#{cnt} + 1 where id=#{id}
	</update>
	
	<!-- 가져온 버킷을 selectedbucket에 저장 -->
	<!-- <insert id="insertSelectedBucket" parameterType="vo.LikeGetVO">
		<selectKey resultType="int" keyProperty="selectedbucket_id" order="BEFORE">
      		select selectedbucket_seq.nextval from dual     
    	</selectKey> 
		insert into selectedbucket(id,bucket_id,title,content,stat) select selectedbucket_id, bucket_id, title, content,stat
		from selectedbucket where bucket_id = #{id}
	</insert> -->
<!-- 가져오기 끝 -->

	<!-- 회원 가입 -->
	<!-- <insert id="signup">
		insert into tbl_member(userId, userPass, userName)
			values(#{userId}, #{userPass}, #{userName})  
	</insert>

	닉네임 존재여부 체크 
	<select id="checkOverName" parameterType="String" resultType="int">
		select count(*) from tbl_member where userName = #{userName}
	</select>
	
	ID 존재여부 체크 
	<select id="checkOverId" parameterType="String" resultType="int">
		select count(*) from tbl_member where userId = #{userId}
	</select>
	
	회원 로그인 정보 
	<select id="viewMember" resultType="vo.MemberVO">
		select * from tbl_member
			where userId=#{userId}
	</select>

	아이디 찾기 
	<select id="find_id" parameterType="String" resultType="String">
		select userId from tbl_member where userName = #{userName}
	</select>
	
	비밀번호 찾기
	<select id="find_pw" parameterType="vo.MemberVO" resultType="String">
		select userPass from tbl_member 
			where userName = #{userName} and userId = #{userId}
	</select>
	
	비밀번호 임시 비밀번호 저장
	<update id="tmp_pw" parameterType="vo.MemberVO">
		update tbl_member set
			userPass=#{userPass}
		where userName = #{userName} and userId=#{userId}
	</update>
	
	회원 탈퇴
	<delete id="withdrawal">
		delete from tbl_member where userId = #{userId}
	</delete>
	
	회원정보 수정
	<update id="updateMember" parameterType="vo.MemberVO">
		update tbl_member set 
			userName=#{userName}, userPass=#{userPass} 
		where userId=#{userId}
	</update> -->
</mapper>